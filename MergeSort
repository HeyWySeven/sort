package com.oracle.sort;

import java.util.Arrays;

/**
 * 对于给定的一组记录，利用递归和分治技术将数据序列划分为越来越小的，
 * 再对半子表排序，最后再用递归方法将半子表合并为越来越大的有序序列
 * 经过第一轮比较之后得到最小的记录，然后将该记录的位置与读一个记录的位置交换；
 * 接着对除去最小的记录以外的其他记录进行第二次比较，得到最小记录并与第二个位置记录交换；
 * 重复该过程直到进行比较的记录只剩下一个为止
 * @author Administrator
 *
 */
public class MergeSort {

	public static void main(String[] args) {
		
		int[] a={ 51, 46, 20, 18, 65, 97, 82, 30, 77, 50};
		mergeSort(a,0,a.length-1);
		System.out.println(Arrays.toString(a));
       
	}
	
	public static void mergeSort(int[] array,int low,int high){
		//递归
		int mid=(low+high)/2;
		if(low<high){
			//左边
			mergeSort(array,low,mid);
			//右边
			mergeSort(array,mid+1,high);
			//左右合并
			merge(array,low,mid,high);
			
		}
	}
	
	public static void merge(int[] array,int low,int mid,int high){
		//临时数组存储调整顺序的结果
		int[] temp=new int[high-low+1];
		int i=low;//左指针
		int j=mid+1;//右指针
		int k=0;//temp数组指针
		//把较小的数先移到新数组
		while(i<=mid&&j<=high){
			if(array[i]<array[j]){
				temp[k++]=array[i++];
			}else{
				temp[k++]=array[j++];
			}
		}
		
		//把左边剩余的数移入到数组中
		while(i<=mid){
			temp[k++]=array[i++];
		}
		//把右边剩余的数移入到数组中
		while(j<=high){
			temp[k++]=array[j++];
		}
		
		//新数组中的数覆盖原数组
		for(int k2=0;k2<temp.length;k2++){
			array[low+k2]=temp[k2];
		}
	}

}
