package com.oracle.sort;

import java.util.Arrays;

/**
 * 快速排序的原理：选择一个关键值作为基准值。
 * 比基准值小的都在左边序列（一般是无序的），比基准值大的都在右边（一般是无序的）。一般选择序列的第一个元素。

        一次循环：从后往前比较，用基准值和最后一个值比较，如果比基准值小的交换位置，如果没有继续比较下一个，
        直到找到第一个比基准值小的值才交换。找到这个值之后，又从前往后开始比较，如果有比基准值大的，交换位置，
        如果没有继续比较下一个，直到找到第一个比基准值大的值才交换。直到从前往后的比较索引>从后往前比较的索引，
        结束第一次循环，此时，对于基准值来说，左右两边就是有序的了。

       接着分别比较左右两边的序列，重复上述的循环。
 * @author Administrator
 *
 */
public class QuickSort {

	public static void main(String[] args) {

		int[] a = { 51, 46, 20, 18, 65, 97, 82, 30, 77, 50 };
		quickSort(a);
		System.out.println(Arrays.toString(a));

	}

	public static void sort(int a[], int low, int hight) {
		int i, j, index;
		if (low > hight) {
			return;
		}
		i = low;
		j = hight;
		index = a[i]; // 用子表的第一个记录做基准
		while (i < j) { // 从表的两端交替向中间扫描
			while (i < j && a[j] >= index)
				j--;
			if (i < j)
				a[i++] = a[j];// 用比基准小的记录替换低位记录
			while (i < j && a[i] < index)
				i++;
			if (i < j) // 用比基准大的记录替换高位记录
				a[j--] = a[i];
		}
		a[i] = index;// 将基准数值替换回 a[i]
		sort(a, low, i - 1); // 对低子表进行递归排序
		sort(a, i + 1, hight); // 对高子表进行递归排序

	}

	public static void quickSort(int a[]) {
		sort(a, 0, a.length - 1);
	}

}
